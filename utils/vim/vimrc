" Comments in Vimscript start with a `"`.

" If you open this file in Vim, it'll be syntax highlighted for you.

" Vim is based on Vi. Setting `nocompatible` switches from the default
" Vi-compatibility mode and enables useful Vim functionality. This
" configuration option turns out not to be necessary for the file named
" '~/.vimrc', because Vim automatically enters nocompatible mode if that file
" is present. But we're including it here just in case this config file is
" loaded some other way (e.g. saved as `foo`, and then Vim started with
" `vim -u foo`).
set nocompatible

" Turn on syntax highlighting.
syntax on

" Disable the default Vim startup message.
set shortmess+=I

" Show line numbers.
set number

" This enables relative line numbering mode. With both number and
" relativenumber enabled, the current line shows the true line number, while
" all other lines (above and below) are numbered relative to the current line.
" This is useful because you can tell, at a glance, what count is needed to
" jump up or down to a particular line, by {count}k to go up or {count}j to go
" down.
set relativenumber

" Always show the status line at the bottom, even if you only have one window open.
set laststatus=2

" The backspace key has slightly unintuitive behavior by default. For example,
" by default, you can't backspace before the insertion point set with 'i'.
" This configuration makes backspace behave more reasonably, in that you can
" backspace over anything.
set backspace=indent,eol,start

" By default, Vim doesn't let you hide a buffer (i.e. have a buffer that isn't
" shown in any window) that has unsaved changes. This is to prevent you from "
" forgetting about unsaved changes and then quitting e.g. via `:qa!`. We find
" hidden buffers helpful enough to disable this protection. See `:help hidden`
" for more information on this.
set hidden

" This setting makes search case-insensitive when all characters in the string
" being searched are lowercase. However, the search becomes case-sensitive if
" it contains any capital letters. This makes searching more convenient.
set ignorecase
set smartcase

" Enable searching as you type, rather than waiting till you press enter.
set incsearch

" Unbind some useless/annoying default key bindings.
nmap Q <Nop> " 'Q' in normal mode enters Ex mode. You almost never want this.

" Disable audible bell because it's annoying.
set noerrorbells visualbell t_vb=

" Enable mouse support. You should avoid relying on this too much, but it can
" sometimes be convenient.
set mouse+=a
set cursorline
" Try to prevent bad habits like using the arrow keys for movement. This is
" not the only possible bad habit. For example, holding down the h/j/k/l keys
" for movement, rather than using more efficient movement commands, is also a
" bad habit. The former is enforceable through a .vimrc, while we don't know
" how to prevent the latter.


set nocompatible              " required
filetype off                  " required
set clipboard=unnamedplus
set clipboard+=unnamed

" set the runtime path to include Vundle and initialize
call plug#begin()
" Install vim-plug:
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

Plug 'arcticicestudio/nord-vim'
Plug 'ghifarit53/tokyonight-vim'

Plug 'easymotion/vim-easymotion'
Plug 'haya14busa/incsearch.vim'
Plug 'haya14busa/incsearch-fuzzy.vim'
Plug 'haya14busa/incsearch-easymotion.vim'

Plug 'jiangmiao/auto-pairs'
" Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }

Plug 'Valloric/YouCompleteMe'
Plug 'PaulHaeger/YCM-Generator', { 'branch': 'stable' }

Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin', {'on':'NERDTreeToggle'}
Plug 'ryanoasis/vim-devicons'

Plug 'skywind3000/vim-auto-popmenu'
Plug 'skywind3000/vim-dict'
Plug 'skywind3000/vim-preview'

Plug 'klen/python-mode'
Plug 'jmcantrell/vim-virtualenv'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'scrooloose/nerdcommenter'
Plug 'mhinz/vim-startify'
Plug 'kien/rainbow_parentheses.vim'
Plug 'yegappan/taglist'
Plug 'ludovicchabant/vim-gutentags'
Plug 'vim-airline/vim-airline'
Plug 'Yggdroot/indentLine'
Plug 'crusoexia/vim-monokai'
Plug 'luochen1990/rainbow'

Plug 'voldikss/vim-floaterm'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'liuchengxu/vim-which-key'

Plug 'airblade/vim-gitgutter'
Plug 'knubie/vim-kitty-navigator'
" Plug 'vim-airline/vim-airline-themes'
" Plug 'neoclide/coc.nvim', {'branch': 'release'}

"Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting

" === KeyBindings ===
" ===================
map <F2> :TlistToggle<CR>
nmap <leader>D <plug>(YCMHover)

map  f <Plug>(easymotion-bd-f)
nmap f <Plug>(easymotion-overwin-f)
map r <Plug>(easymotion-repeat)
" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)

map / <Plug>(incsearch-easymotion-/)
map ? <Plug>(incsearch-easymotion-?)
" map gz/ <Plug>(incsearch-easymotion-stay)
" Files search
" Do this in normal mode...
nnoremap <Left>  :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up>    :echoe "Use k"<CR>
nnoremap <Down>  :echoe "Use j"<CR>
" nnoremap <C-h>   :term <CR>
nnoremap <C-h>   :FloatermToggle<CR>
nnoremap <C-i>   :FloatermNew --height=1.0 --width=1.0 lazygit <CR>
" ...and in insert mode
inoremap <Left>  <ESC>:echoe "Use h"<CR>
inoremap <Right> <ESC>:echoe "Use l"<CR>
inoremap <Up>    <ESC>:echoe "Use k"<CR>
inoremap <Down>  <ESC>:echoe "Use j"<CR>
" Do this in terminal mode...
tnoremap <C-q>   <C-w>N<CR>
tnoremap <C-h>   :FloatermToggle<CR>

" === which-key.vim ===
" ===============
let g:which_key_timeout = 100
set timeoutlen=100
let g:mapleader = "\<Space>"
call which_key#register('<Space>', "g:which_key_map")
nnoremap <silent> <leader> :silent <c-u> :silent WhichKey '<Space>'<CR>
vnoremap <silent> <leader> :silent <c-u> :silent WhichKeyVisual '<Space>'<CR>
let g:which_key_sep = '→'
let g:which_key_map = {}
let g:which_key_map['q'] = [ ':q!', 'quit Neovim without saving' ]
let g:which_key_map['e'] = [ ':NERDTreeToggle', 'toggle NERDTree' ]
let g:which_key_map['n'] = [ ':NERDTreeFocus' , 'focus  NERDTree' ]
let g:which_key_map['w'] = {
      \ 'name' : '+windows' ,
      \ 'w' : ['<C-W>w'     , 'other-window']          ,
      \ 'd' : ['<C-W>c'     , 'delete-window']         ,
      \ '-' : ['<C-W>s'     , 'split-window-below']    ,
      \ '|' : ['<C-W>v'     , 'split-window-right']    ,
      \ '2' : ['<C-W>v'     , 'layout-double-columns'] ,
      \ 'h' : ['<C-W>h'     , 'window-left']           ,
      \ 'j' : ['<C-W>j'     , 'window-below']          ,
      \ 'l' : ['<C-W>l'     , 'window-right']          ,
      \ 'k' : ['<C-W>k'     , 'window-up']             ,
      \ 'H' : ['<C-W>5<'    , 'expand-window-left']    ,
      \ 'J' : [':resize +5'  , 'expand-window-below']   ,
      \ 'L' : ['<C-W>5>'    , 'expand-window-right']   ,
      \ 'K' : [':resize -5'  , 'expand-window-up']      ,
      \ '=' : ['<C-W>='     , 'balance-window']        ,
      \ 's' : ['<C-W>s'     , 'split-window-below']    ,
      \ 'v' : ['<C-W>v'     , 'split-window-below']    ,
      \ '?' : ['Windows'    , 'fzf-window']            ,
      \ }

let g:which_key_map['f'] = {
      \ 'name' : '+Search' ,
      \ 'f' : [':Files'     , 'search files']          	,
      \ 't' : [':Rg'        , 'Rg search text']			,
      \ 'a' : [':Ag'        , 'Ag search text']			,
      \ 'r' : [':History'   , 'search recent files'] 	,
	  \ 'k' : [':Maps'      , 'search keymapping'] 		,
	  \ 'c' : [':Command'   , 'search commands'] 		,
	  \ 'h' : [':Helptags'  , 'search helptags'] 		,
	  \ 'g' : [':Tags'  	, 'search tags'] 			,
	  \ 'e' : [':Changes'  	, 'search changes'] 		,
	  \ 'm' : [':Marks'  	, 'search marks'] 			,
	  \ 'w' : [':Windows'  	, 'search windows'] 		,
      \ }
let g:which_key_map['m'] = {
			\ 'name' : '+easymotion' ,
			\ 'l' : ['<Plug>(easymotion-overwin-line)', 'Move to line(overwin)'],
			\ 'L' : ['<Plug>(easymotion-bd-jk)', 'Move to line'],
			\ 'w' : ['<Plug>(easymotion-bd-w)', 'Move to word'],
			\ 'W' : ['<Plug>(easymotion-bd-overwin-w)', 'Move to word(overwin)'],
			\ }
" === YouCompleteMe ===
" =====================
let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_show_diagnostics_ui = 0
let g:ycm_server_log_level = 'info'
let g:ycm_min_num_identifier_candidate_chars = 2
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_complete_in_strings=1
let g:ycm_key_invoke_completion = '<c-z>'

" https://www.ditig.com/256-colors-cheat-sheet
highlight PMenu ctermfg=0 ctermbg=242 guifg=black guibg=darkgrey
highlight PMenuSel ctermfg=242 ctermbg=8 guifg=darkgrey guibg=black

set completeopt=menu,menuone

noremap <c-z> <NOP>
nnoremap gd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap g/ :YcmCompleter GetDoc<CR>
" nnoremap gt :YcmCompleter GetType<CR>
nnoremap gr :YcmCompleter GoToReferences<CR>
" 换行的时候可以自动跳到下一行
imap {<CR> {<CR>}<ESC>O

let g:ycm_semantic_triggers =  {
			\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
			\ 'cs,lua,javascript': ['re!\w{2}'],
			\ }
let g:ycm_filetype_whitelist = {
			\ "c":1,
			\ "cpp":1,
			\ "objc":1,
			\ "sh":1,
			\ "zsh":1,
			\ "zimbu":1,
			\ }


let g:ycm_filetype_blacklist = {'text':1, 'markdown':1, 'php':1}
let g:apc_enable_ft = {'text':1, 'markdown':1, 'php':1}
" 设定需要生效的文件类型，如果是 "*" 的话，代表所有类型
let g:apc_enable_ft = {'text':1, 'markdown':1, 'php':1}
"
" " 设定从字典文件以及当前打开的文件里收集补全单词，详情看 ':help cpt'
set cpt=.,k,w,b
"
"" 不要自动选中第一个选项。
set completeopt=menu,menuone,noselect

" 禁止在下方显示一些啰嗦的提示
set shortmess+=c

" === insearch easymotion ===
" ==========================
" incsearch.vim x fuzzy x vim-easymotion

function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
  \   'converters': [incsearch#config#fuzzy#converter()],
  \   'modules': [incsearch#config#easymotion#module()],
  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
  \   'is_expr': 0,
  \   'is_stay': 1
  \ }), get(a:, 1, {}))
endfunction

" === FloatTerm ===
" ================
let g:floaterm_width=0.7
let g:floaterm_height=0.8
" === NERDTree ===
" ================
let g:NERDTreeWinPos = "left"

" === TagList ===
" ===============
let Tlist_Use_Right_Window   = 1

" === CTags ===
" ===============
set tags=./.tags;,.tags

" === Cscope ===
" ===============
" cscope -Rbkq
" : cs add ./cscope.out # 添加 cscope.out
" ：cs find s ---- 查找C语言符号，即查找函数名、宏、枚举值等出现的地方
" ：cs find g ---- 查找函数、宏、枚举等定义的位置，类似ctags所提供的功能
" ：cs find d ---- 查找本函数调用的函数
" ：cs find c ---- 查找调用本函数的函数
" ：cs find t: ---- 查找指定的字符串
" ：cs find e ---- -查找egrep模式，相当于egrep功能，但查找速度快多了
" ：cs find f ----- 查找并打开文件，类似vim的find功能

" === coc.nvim settings ===
" =========================
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list
" nmap <silent> [g <Plug>(coc-diagnostic-prev)
" nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
" nmap <silent> gd <Plug>(coc-definition)
" nmap <silent> gy <Plug>(coc-type-definition)
" nmap <silent> gi <Plug>(coc-implementation)
" nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
" nnoremap <silent> K :call ShowDocumentation()<CR>

" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
"
" " 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'
"
"" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags

" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
"
"" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
    silent! call mkdir(s:vim_tags, 'p')
endif

" colo monokai
set termguicolors

let g:tokyonight_style = 'night' " available: night, storm
let g:tokyonight_enable_italic = 1

colorscheme tokyonight

set encoding=utf-8
let &termencoding=&encoding
set fileencodings=utf-8,gbk,gb18030,gb2312,big5

set tabstop=4
set smartindent
set shiftwidth=4
